#!/bin/zsh

# 1. Verificar si es un repositorio Git
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "‚ùå Este directorio no es un repositorio Git. Usa 'git init' primero."
  exit 1
fi

# 2. Moverse a la ra√≠z del repositorio
repo_root=$(git rev-parse --show-toplevel)
cd "$repo_root" || exit 1

# 3. Lista de carpetas
main_dirs=(Bugfix Chore Docs Features Hotfix Refactor Test UX-UI)

# 4. Crear estructura y prompts espec√≠ficos por carpeta
for dir in "${main_dirs[@]}"; do
  mkdir -p "specs/$dir"
  
  case $dir in
    Bugfix)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Bugfix

Act√∫a como un depurador experto. Tu tarea es detectar y corregir el bug o comportamiento defectuoso en el siguiente fragmento de c√≥digo o sistema. No reescribas todo: **identifica exactamente la l√≠nea o bloque defectuoso y sugiere el cambio m√≠nimo necesario para corregir el error sin afectar otras funcionalidades.** Explica brevemente la causa ra√≠z del problema y por qu√© tu soluci√≥n lo resuelve.

Usa esta estructura:

1. **Descripci√≥n breve del bug detectado**
2. **Causa ra√≠z t√©cnica**
3. **L√≠nea(s) espec√≠fica(s) que deben cambiarse**
4. **C√≥digo corregido (solo lo que cambia)**

No realices mejoras estil√≠sticas ni refactors generales, a menos que sean estrictamente necesarios para corregir el bug.
EOF
      ;;
    Bugs)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Bugs

Genera una lista de posibles bugs con base en la descripci√≥n del comportamiento del sistema. Cada bug debe incluir una breve hip√≥tesis de causa, su impacto potencial y c√≥mo se podr√≠a confirmar con pruebas o logs.

Incluye:

- Componente afectado
- Comportamiento observado
- Posible causa
- M√©todo de verificaci√≥n
EOF
      ;;
    Chore)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Chore

Redacta tareas t√©cnicas de mantenimiento o configuraci√≥n del sistema que no est√©n directamente relacionadas con nuevas funcionalidades ni correcciones visibles. Pueden incluir limpieza de c√≥digo, configuraci√≥n de herramientas, actualizaci√≥n de dependencias, etc.

Usa este formato:

- Tarea: breve descripci√≥n
- Justificaci√≥n: por qu√© es necesario
- Instrucciones o pasos clave
EOF
      ;;
    Docs)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Docs

Genera documentaci√≥n t√©cnica clara y concisa a partir de c√≥digo o descripciones funcionales. Puedes usar formato Markdown para estructurar secciones como "Descripci√≥n", "Par√°metros", "Ejemplo de uso" y "Notas adicionales".

Evita lenguaje ambiguo. S√© directo y √∫til para futuros desarrolladores.
EOF
      ;;
    Features)
      cat <<'EOF' > "specs/$dir/Prompt.md"
Aplicar los cambios al c√≥digo t√©cnicos con alta precisi√≥n para agentes especializados, garantizando consistencia absoluta en UX/UI y arquitectura de aplicaci√≥n.

**RESPONSABILIDADES CORE:**

- Analizar requerimientos t√©cnicos complejos preservando design systems existentes
- Dise√±ar prompts estructurados que mantengan coherencia visual y funcional
- Incluir fragmentos de c√≥digo, schemas y patrones que respeten la arquitectura actual
- Optimizar para m√°xima eficiencia sin comprometer la experiencia de usuario

**FORMATO DE SALIDA OBLIGATORIO:**

```
CONTEXTO: [Rol espec√≠fico del agente + dominio t√©cnico + estado actual de la aplicaci√≥n]
OBJETIVO: [Meta t√©cnica precisa + criterios de √©xito medibles + requisitos de consistencia]
RESTRICCIONES: 
- T√©cnicas: [Limitaciones de arquitectura, recursos, APIs]
- UX/UI: [Design system, componentes existentes, patrones de interacci√≥n]
- Consistencia: [Gu√≠as de estilo, nomenclatura, flujos establecidos]
ESPECIFICACIONES:
- Input esperado: [Formato exacto + validaciones + contexto de UI actual]
- Output requerido: [Estructura + tipos de datos + componentes UI reutilizables]
- Dependencias: [APIs, librer√≠as, servicios + design tokens/variables]
- Componentes existentes: [Lista de UI components a reutilizar]
IMPLEMENTACI√ìN:
[C√≥digo/pseudoc√≥digo/schemas que mantienen patrones establecidos]
CONSISTENCIA UI/UX:
- Componentes: [Reutilizaci√≥n obligatoria de elementos existentes]
- Patrones: [Flujos de navegaci√≥n y interacci√≥n a preservar]
- Tokens: [Colores, tipograf√≠a, espaciado, iconograf√≠a]
- Estados: [Loading, error, success states consistentes]
```

**PRINCIPIOS DE OPTIMIZACI√ìN:**

- M√°xima especificidad t√©cnica manteniendo coherencia visual
- Cero ambig√ºedad en instrucciones + preservaci√≥n de patrones existentes
- Incluir manejo de edge cases sin romper flujos establecidos
- Proporcionar c√≥digo que extienda componentes existentes
- Definir criterios de validaci√≥n que incluyan consistency checks


Responde √∫nicamente con el prompt optimizado. Sin pre√°mbulos, explicaciones o texto adicional.

---

FEATURE A IMPLEMENTAR:
EOF
      ;;
    Hotfix)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Hotfix

Redacta un cambio urgente que solucione un error cr√≠tico en producci√≥n. Debe ser lo m√°s m√≠nimo y seguro posible, sin reestructurar el sistema.

Estructura:

- Descripci√≥n del fallo cr√≠tico
- Alcance del cambio
- Validaciones necesarias
- Plan de reversi√≥n en caso de falla
EOF
      ;;
    Refactor)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Refactor

Reformula una porci√≥n del c√≥digo para mejorar su legibilidad, mantenibilidad o eficiencia **sin cambiar su comportamiento funcional**.

Incluye:

- Raz√≥n del refactor (mala pr√°ctica, duplicaci√≥n, etc.)
- Principio de dise√±o aplicado (ej. DRY, KISS)
- Antes y despu√©s del c√≥digo (solo el fragmento modificado)
EOF
      ;;
    Test)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para Test

Genera casos de prueba autom√°ticos para una funci√≥n o m√≥dulo. Cada prueba debe:

- Cubrir entradas t√≠picas y l√≠mites
- Incluir resultado esperado
- Usar lenguaje o framework de testing adecuado (ej. Jest, PyTest, etc.)

Indica tambi√©n qu√© t√©cnica de prueba se est√° aplicando (unitaria, integraci√≥n, etc.).
EOF
      ;;
    UX-UI)
      cat <<'EOF' > "specs/$dir/Prompt.md"
## Prompt para UX-UI

Describe una propuesta de mejora visual o de experiencia de usuario. Incluye:

- Pantalla o componente afectado
- Problema detectado (ergonom√≠a, accesibilidad, est√©tica)
- Soluci√≥n propuesta (texto, layout, color, flujo)
- Referencia visual o ejemplo comparativo (si aplica)
EOF
      ;;
  esac
done

cat <<'EOF' > "specs/UX-UI Suggestions.md"
## Prompt para UX-UI Suggestions

Analiza todo el c√≥digo fuente disponible y detecta las funcionalidades actualmente implementadas (features).
Para cada feature existente, realiza lo siguiente:

Describe brevemente su prop√≥sito y c√≥mo se implementa actualmente.

Eval√∫a su dise√±o, eficiencia, legibilidad y experiencia de uso desde una perspectiva de ingenier√≠a de software moderna.

Prop√≥n al menos una mejora por feature. Las mejoras pueden ser:

- Refactorizaci√≥n del c√≥digo para mayor claridad o eficiencia.
- Reemplazo de librer√≠as obsoletas.
- Cambios en el flujo o experiencia del usuario (UX).
- Mejora en el manejo de errores o validaciones.
- Sugerencias de tests adicionales si los existentes son d√©biles.

Justifica cada propuesta de mejora con base en buenas pr√°cticas, frameworks comunes o principios como SOLID, DRY, KISS o principios de accesibilidad.

‚ú≥Ô∏è Si una feature no necesita cambios importantes, ind√≠calo brevemente con una justificaci√≥n.

üìå Mantente enfocado solo en las funcionalidades que ya est√°n presentes, sin proponer nuevas funcionalidades a√∫n no existentes.

Usa como inspiraci√≥n las im√°genes y encuentra la manera de c√≥mo implementar nuevas cosas y mejoras a partir de lo que veas en las im√°genes, como una calculadora auxiliar en transacciones.
EOF

echo "‚úÖ Carpetas y Prompt.md con contenido espec√≠fico creados."


# --- Configuraci√≥n ---
# Directorio donde se encuentra este script.
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
# Directorio ra√≠z del proyecto.
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
# Nombre del proyecto (el nombre de la carpeta ra√≠z).
PROJECT_NAME=$(basename "$PROJECT_ROOT")
# Archivo de salida donde se guardar√° todo el c√≥digo.
OUTPUT_FILE="$PROJECT_ROOT/specs/code-context.txt"

echo "Proyecto ra√≠z detectado en: $PROJECT_ROOT"
echo "Nombre del proyecto: $PROJECT_NAME"


# --- Exclusiones para este flujo ---

# Directorios a excluir
EXCLUDE_DIRS=(
    .git node_modules .expo .idea .vscode build dist
    android/.gradle android/app/build ios/Pods ios/build android/build
    coverage flow-typed temp tmp uploads notebook-renderer-react-sample
    scripts/uploads_server/venv311
)
# Archivos a excluir por nombre/patr√≥n
EXCLUDE_FILES=(
    "*.lock" "yarn.lock" "package-lock.json" "*.podspec" "README.md"
    "LICENSE" "code-context.txt" "app.json" "package.json"
    "metro.config.js" "tsconfig.json" "eslint.config.js" "babel.config.js"
    "jest.config.js" "prettier.config.js" "styled.d.ts" ".env*" "Gemfile"
    "Gemfile.lock" "Podfile.lock" "android/gradlew" "android/gradlew.bat"
    "android/gradle/wrapper/gradle-wrapper.jar" "android/app/debug.keystore"
    "android/app/proguard-rules.pro" "android/gradle.properties"
    "android/settings.gradle" "android/build.gradle" "android/app/build.gradle"
    "ios/*.xcodeproj" "ios/*.xcworkspace" "ios/*.xcscheme" "ios/Podfile"
    "ios/Cartfile" "ios/Cartfile.resolved"
)
# Extensiones a excluir
EXCLUDE_EXTENSIONS=(
    jpg png jpeg gif svg webp ico mp4 mov avi mkv log zip tar gz
    otf ttf map db sqlite3 tab keystream bin md py html css xml
    bak tmp swp DS_Store pyc sh keystore jar exe egg
)

echo "El contexto completo del c√≥digo se guardar√° en: $OUTPUT_FILE"

# --- Construcci√≥n Din√°mica de Argumentos para 'find' ---

# 1. Construir argumentos para --prune (excluir directorios completos)
prune_args=()
if [ ${#EXCLUDE_DIRS[@]} -gt 0 ]; then
    for dir in "${EXCLUDE_DIRS[@]}"; do
        prune_args+=(-o -path "*/$dir")
    done
    prune_args=("${prune_args[@]:1}")
fi

# 2. Construir argumentos para archivos a excluir por nombre/patr√≥n
name_args=()
if [ ${#EXCLUDE_FILES[@]} -gt 0 ]; then
    for file in "${EXCLUDE_FILES[@]}"; do
        name_args+=(-o -name "$file")
    done
    name_args=("${name_args[@]:1}")
fi

# 3. Construir argumentos para archivos a excluir por extensi√≥n
ext_args=()
if [ ${#EXCLUDE_EXTENSIONS[@]} -gt 0 ]; then
    for ext in "${EXCLUDE_EXTENSIONS[@]}"; do
        ext_args+=(-o -name "*.$ext")
    done
    ext_args=("${ext_args[@]:1}")
fi

# --- Procesamiento Principal ---

# Limpiar/crear el archivo de salida
echo "Generando contexto de c√≥digo completo..."
echo "===== INICIO DEL CONTEXTO DEL C√ìDIGO DEL PROYECTO: $PROJECT_NAME =====\n\n" > "$OUTPUT_FILE"

# Comando 'find' final
find "$PROJECT_ROOT" \
    \( "${prune_args[@]}" \) -prune \
    -o \
    -type f \
    ! \( "${name_args[@]}" \) \
    ! \( "${ext_args[@]}" \) \
    -print0 |
while IFS= read -r -d $'\0' file; do
    if [ -s "$file" ]; then
        rel_path="${file#$PROJECT_ROOT/}"
        echo "--- Fichero: $rel_path ---" >> "$OUTPUT_FILE"
        cat "$file" >> "$OUTPUT_FILE"
        printf "\n\n" >> "$OUTPUT_FILE"
    fi
done

echo "\n===== FIN DEL CONTEXTO DEL C√ìDIGO DEL PROYECTO: $PROJECT_NAME =====" >> "$OUTPUT_FILE"
echo "¬°√âxito! El contexto se ha escrito en $OUTPUT_FILE"

# --- Modo de operaci√≥n ---
MODE="full"
if [ -n "$1" ]; then
  MODE="$1"
fi

# --- Creaci√≥n autom√°tica de carpeta de proyecto y copia de Template ---
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
PROJECT_NAME=$(basename "$PROJECT_ROOT")
TEMPLATE_DIR="$SCRIPT_DIR/../Template"
if [ ! -d "$PROJECT_ROOT/$PROJECT_NAME" ] && [ -d "$TEMPLATE_DIR" ]; then
  cp -r "$TEMPLATE_DIR" "$PROJECT_ROOT/$PROJECT_NAME"
  for f in "$PROJECT_ROOT/$PROJECT_NAME"/*; do mv "$f" "$PROJECT_ROOT/$PROJECT_NAME/$(basename "$f" | sed "s/Template/$PROJECT_NAME/g")"; done
  echo "[INFO] Proyecto $PROJECT_NAME creado autom√°ticamente a partir de Template."
fi